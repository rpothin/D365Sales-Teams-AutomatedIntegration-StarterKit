# Pipeline automatically triggered when their is a commit in the 'SolutionsUnpacked' folder of the main branch to generate a GitHub release
# No input variables

# Pipeline automatically triggered when there is a commit on the main branch
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - SolutionsUnpacked/*
    exclude:
    - Workflows/*
    - LICENSE
    - README.md

pr: none # Pipeline not triggered on a pull request

variables:
- name: SolutionName
  value: CustomTeamsIntegration
- name: GitHubConnectionName
  value: GitHub - Rpothin PAT
- name: GitHubRepositoryName
  value: rpothin/D365Sales-Teams-AutomatedIntegration-StarterKit

stages:
# Stage for:
# - the build an unmanaged solution from the files in the main branch
- stage: 'BuildUnmanagedSolution'
  displayName: 'Build an unmanaged solution'
  jobs:
    - job: 'BuildUnmanagedSolution'
      displayName: 'BuildUnmanagedSolution job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      # Install the Power Platform Build Tools
      - task: PowerPlatformToolInstaller@0
        inputs:
          DefaultVersion: true
      
      # Build an unmanaged solution from the files in the pull request source branch
      - task: PowerPlatformPackSolution@0
        inputs:
          SolutionSourceFolder: '$(Build.SourcesDirectory)\SolutionsUnpacked\$(SolutionName)'
          SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'

      # Publish the unmanaged solution we got in a previous task as an artifcat so we can use it in a next stage
      - publish: '$(Build.ArtifactStagingDirectory)\$(SolutionName).zip'
        displayName: 'Publish unmanaged solution for later use in the pipeline'
        artifact: dropUnmanagedSolution

# Stage for the publication of a GitHub release
# This stage runs only if 'BuildUnmanagedSolution' stage is succeeded
- stage: 'PublishGitHubRelease'
  displayName: 'Publish a GitHub release'
  dependsOn: BuildUnmanagedSolution
  condition: succeeded()
  jobs:
    - deployment: 'PublishGitHubRelease'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      environment: 'GitHub Releases'

      strategy:
        runOnce:
          deploy:
            steps:
              # Get artifacts built in the previous stage with the unmanaged solution
              - download: current
                artifact: dropUnmanagedSolution

              # Create GitHub Release
              - task: GithubRelease@0 
                displayName: 'Create GitHub Release'      
                inputs:
                  gitHubConnection: $(GitHubConnectionName)
                  repositoryName: $(GitHubRepositoryName)
                  action: create
                  tagSource: manual
                  tag: $(Build.BuildNumber)
                  title: $(Build.BuildNumber)
                  assets: |
                    $(Pipeline.Workspace)\dropUnmanagedSolution\$(SolutionName).zip